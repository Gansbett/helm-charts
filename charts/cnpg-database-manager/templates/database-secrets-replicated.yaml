{{- range $clusterName, $cluster := .Values.clusters }}
{{- if $cluster.enabled }}
{{- if $cluster.databases }}
{{- range $database := $cluster.databases }}
{{- if and (not $database.existingSecret) $database.targetNamespace }}
{{- $nsExists := (lookup "v1" "Namespace" "" $database.targetNamespace) }}
{{- if $nsExists }}
{{- $secretName := printf "%s-%s-creds" $clusterName (include "cnpg-database-manager.sanitizeName" $database.name) }}
{{- $existingSecret := lookup "v1" "Secret" $.Release.Namespace $secretName }}
{{- $password := "" }}
{{- if $existingSecret }}
{{- $password = index $existingSecret.data "password" }}
{{- else }}
{{- $password = randAlphaNum 32 | b64enc }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $database.targetNamespace }}
  labels:
    {{- include "cnpg-databases.labels" $ | nindent 4 }}
    cnpg.io/cluster: {{ $clusterName }}
    cnpg.io/database: {{ $database.name }}
    cnpg.io/replicated: "true"
  annotations:
    cnpg.io/source-namespace: {{ $.Release.Namespace }}
type: Opaque
data:
  username: {{ $database.owner | b64enc | quote }}
  password: {{ $password | quote }}
  dbname: {{ $database.name | b64enc | quote }}
  host: {{ printf "%s-rw.%s.svc.cluster.local" $clusterName $.Release.Namespace | b64enc | quote }}
  port: {{ "5432" | b64enc | quote }}
  # Connection string for convenience
  jdbc-url: {{ printf "jdbc:postgresql://%s-rw.%s.svc.cluster.local:5432/%s" $clusterName $.Release.Namespace $database.name | b64enc | quote }}
  uri: {{ printf "postgresql://%s:$(password)@%s-rw.%s.svc.cluster.local:5432/%s" $database.owner $clusterName $.Release.Namespace $database.name | b64enc | quote }}
{{- else }}
# Note: Namespace {{ $database.targetNamespace }} does not exist for database {{ $database.name }}, skipping secret replication
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}